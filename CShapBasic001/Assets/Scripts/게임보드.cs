using System.Collections;
using System.Collections.Generic;
using UnityEditor.U2D.Aseprite;
using UnityEngine;



public class 위치형
{
    public float x; //x 위치 변수 
    public float y; //y 위치 변수 
    public float z; //z 위치 변수 

    //위치 객체 안의 요소(좌표값)을 설정하는 메소드
    // *현재 메소드의 문법을 이해할 필요는 없음. (용도만 이해할 것)

    public void 위치설정하기()
    {
        // 랜덤 숫자 뽑기
        // * 랜덤 숫자변수 = Random.Range(랜덤시작범위숫자, 랜덤끝범위숫자)

        this.x = Random.Range(1f, 10f);
        this.y = Random.Range(1f, 10f);
        this.z = Random.Range(1f, 10f);
               
    }
    public void 위치출력하기()
    {
        Debug.Log($"X: {x}, Y: {y}, Z: {z}");
    }
}

// 캐릭터 자료형을 선언(커스텀 자료형 선언) ---> class, struct, enum
public class 캐릭터형 // 구성 : 변수들, 메소드들
{
    // 캐릭터 이름
    public string 이름;
    // 캐릭터 레벨
    public int 레벨;
    // 캐릭터 이동 속도
    public float 이속;

    // 캐릭터의 위치 객체 생성
    public 위치형 위치참조변수 =  new 위치형();

    public void 캐릭터생성(string 이름매개변수, int 레벨매개변수, float 이속매개변수)
    {
        //메소드를 통해 넘겨받은 매개변수들의 값을 객체 멤버변수들에게 설정(저장)함
        이름 = 이름매개변수;
        레벨 = 레벨매개변수;
        이속 = 이속매개변수;

        //현재 객체에 포함된 위치 참조변수를 통해 위치 객체에 접근해 위치를 설정하는 메소드를 실행함
        위치참조변수.위치설정하기();
    }
    
    // 현제 클래스 기반으로 생성된 객체의 구성 요소변수 값을 출력하는 메소드! (이벤트 메소드X)
    public void 정보출력(int 번호) //  커스첨 메소드
    {
        Debug.Log($"플레이어 {번호}의 이름: {이름}");
        Debug.Log($"플레이어 {번호}의 레벨: {레벨}");
        Debug.Log($"플레이어 {번호}의 이속: {이속}");

        //현재 객체에 포함된 위치 참조변수를 통해 위치 객체에 접근해 위치를 설정하는 메소드를 실행함
        위치참조변수.위치출력하기();
    }


}



public class 게임보드 : MonoBehaviour
{
    // [복습 개념]
    // 변수는 메모리랑 같은 개념임
    // 변수명은 메모리를 접근하려는 명칭을 뜻함
    // 자료형은 생성될 메모리의 크기와 저장될 데이터의 종류에 맞춰서 정해짐
    // 변수 생성 -> 메모리 생성을 뜻함 
    // 변수 생성 문법 : public 자료형 변수명;

    // 게임 이름 변수 생성
    public string 게임이름;

    // 게임 실행 횟수 변수 생성
    public int 게임실행횟수;  // 변수 명은 띄어쓰기가 허용되지 않음

    // 게임 점수 
    public int 게임점수; // 변수 생성
    // 커스텀자료형 변수 생성 문법 : public 커스텀자료형 변수명 = new 커스텀자료형();
    // 캐릭터 커스텀 자료형 기반의 변수 생성
    public 캐릭터형 플레이어객체참조변수1 = new 캐릭터형();  //캐릭터형의 메모리 생성 -> 캐릭터형 객체 생성
    public 캐릭터형 플레이어객체참조변수2 = new 캐릭터형();  //캐릭터형의 메모리 생성 -> 캐릭터형 객체 생성
    public 캐릭터형 플레이어객체참조변수3 = new 캐릭터형();  //캐릭터형의 메모리 생성 -> 캐릭터형 객체 생성

    // class(클래스) : 커스텀 자료형을 만들기(명세) 위한 문법 키워드
    // object(객체) : 커스텀 자료형 기반으로 생성한 메모리 실체
    
    

    void Start()
    {
        // 변수(메모리) 값을 저장(대임)
        //변수에 값을 대입하는 문법 : 변수명 = 값;
        게임점수 = 100; //변수에 값 쓰기

        //Debug.Log($"{변수명}");
        Debug.Log($"{게임이름} 게임은 {게임실행횟수}회만큼 실행됩니다.");
        Debug.Log($"게임 시작시 초기 점수는 {게임점수}입니다."); // 변수의 값 읽기

        // 캐릭터 메모리에 값을 저장

        // 객체의 구성변수에 값을 저장하려면
        // -> 객체의참조변수.구성변수 = 값;

        // 객체의 구성 변수 값 쓰기 

        //플레이어1 객체의 구성변수들의 값 설정
        //플레이어객체참조변수1.이름 = "홍길동";
        //플레이어객체참조변수1.레벨 = 10;
        //플레이어객체참조변수1.이속 = 3.4f;

        //플레이어1 객체의 캐릭터 생성 메소드를 통해 플레이어1 객체의 구성요소값들을 설정함
        플레이어객체참조변수1.캐릭터생성("홍길동", 10, 3.4f);

        //플레이어2 객체의 구성변수들의 값 설정
        //플레이어객체참조변수2.이름 = "히오스";
        //플레이어객체참조변수2.레벨 = 100;
        //플레이어객체참조변수2.이속 = 4.4f;

        //플레이어2 객체의 캐릭터 생성 메소드를 통해 플레이어2 객체의 구성요소값들을 설정함
        플레이어객체참조변수2.캐릭터생성("히오스", 100, 4.4f);

        //플레이어3 객체의 구성변수들의 값 설정
        //플레이어객체참조변수3.이름 = "김삿갓";
        //플레이어객체참조변수3.레벨 = 30;
        //플레이어객체참조변수3.이속 = 5.4f;

        //플레이어3 객체의 캐릭터 생성 메소드를 통해 플레이어2 객체의 구성요소값들을 설정함
        플레이어객체참조변수3.캐릭터생성("김삿갓", 30, 5.4f);

        /*
        // 객체의 구성 변수 값 읽기
        Debug.Log($"플레이어 이름: {플레이어객체참조변수1.이름}");
        Debug.Log($"플레이어 레벨: {플레이어객체참조변수1.레벨}");
        Debug.Log($"플레이어 이속: {플레이어객체참조변수1.이속}");

        Debug.Log($"플레이어 이름: {플레이어객체참조변수2.이름}");
        Debug.Log($"플레이어 레벨: {플레이어객체참조변수2.레벨}");
        Debug.Log($"플레이어 이속: {플레이어객체참조변수2.이속}");

        Debug.Log($"플레이어 이름: {플레이어객체참조변수3.이름}");
        Debug.Log($"플레이어 레벨: {플레이어객체참조변수3.레벨}");
        Debug.Log($"플레이어 이속: {플레이어객체참조변수3.이속}");
        */

        // 객체의 구성 메소드를 통해 객체의 기능을 실행 
        플레이어객체참조변수1.정보출력(1);
        플레이어객체참조변수2.정보출력(2);
        플레이어객체참조변수3.정보출력(3);

    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
